# generate new documentation
system("R CMD Rd2pdf DasyMapR")
try(file.remove(file.path(getwd(),"/home/etsakl/ownCloud/plsthesis/DasyMapR/man/DasyMapR.pdf")))
try(file.remove(file.path(getwd(),"DasyMapR/man/DasyMapR.pdf")))
# generate new documentation
system("R CMD Rd2pdf DasyMapR -o /home/etsakl/ownCloud/plsthesis/DasyMapR/man/DasyMapR.pdf")
setwd("~/ownCloud/plsthesis/DasyMapR")
setwd("~/ownCloud/plsthesis")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
detach(name = "package:DasyMapR",unload = TRUE)
detach(package:DasyMapR,unload = T)
detach(package::DasyMapR,unload = T)
detach(DasyMapR,unload = T)
DasyMapR
roxygenize(package.dir = "DasyMapR")
rm(list=ls(all=TRUE))
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
rm(list=ls(all=TRUE))
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
# now we actually build and install the package
system("R CMD build DasyMapR")
roxygenize(package.dir = "DasyMapR")
system("R CMD INSTALL --preclean DasyMapR_0.0.0.9000.tar.gz")
system("R CMD check DasyMapR")
roxygenize(package.dir = "DasyMapR")
require(roxygen2)
roxygenize(package.dir = "DasyMapR")
setwd('~/ownCloud/plsthesis/')
roxygenize(package.dir = "DasyMapR")
load("~/ownCloud/plsthesis/DasyMapR/data/NUTSV9_LEAC.rda")
roxygenize(package.dir = "DasyMapR")
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
roxygenize(package.dir = "DasyMapR")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
load("~/ownCloud/plsthesis/DasyMapR/data/CLC2000.ARGOLIDA.RES.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/CLC2000_CODES.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/CORINE2000_CODES.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/DASY_GPD.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/GEOSTAT_grid_EU_POP_2006_1k_V1_1_1.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/nama_10r_3gdp.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/NUTS_2013_01M_EL.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/NUTSV9_LEAC.rda")
load("~/ownCloud/plsthesis/DasyMapR/data/NUTSV9_LEAC_GR_1km_grided.RData")
load("~/ownCloud/plsthesis/DasyMapR/data/oikismoi.RData")
setwd('~/ownCloud/plsthesis/')
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
roxygenize(package.dir = "DasyMapR")
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
Cstack_info()
devtools::install(build_vignettes = T)
library(DasyMapR)
detach(package:sp,unload = T)
detach("package:sp",unload = T)
detach("package::sp",unload = T)
detach(sp,unload = T)
sp
library(sp)
install.packages("sp")
library(DasyMapR)
help("DasyMapR-package")
example("etrsMaxArea")
<<etrsMaxAread,echo=FALSE,results='hide',warning=FALSE>>=
x <- round(runif(1, min = 4321000, max = 4322000), 1)
y <- round(runif(1, min = 3211000, max = 3212000), 1)
xy <- cbind(x, y)
size = round(runif(1,min = 1500,max = 1500),0)
pl1 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + size,y + size,y)   ))),round(runif(1,min = 1,max = 100),0))
x <- x + size
pl2 <- Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + 2 * size,y + 2 * size,y)))),round(runif(1,min = 1,max = 100),0))
x<-x-size
y<-y+size
pl3 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y +  size,y +  size,y)   ))),round(runif(1,min = 1,max = 100),0))
sps <- SpatialPolygons(list(pl1,pl2,pl3),proj4string = CRS("+init=epsg:2100"))
df <-data.frame(val=c("R5","R40","R80"),row.names = sapply(slot(sps, "polygons"), function(x) slot(x, "ID")))
Source.Surface <-SpatialPolygonsDataFrame(sps,data = df)
# Uses the default etrsSurface method
Source.Surface.MaxArea <- etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 2000)
text(Source.Surface@bbox[1,],Source.Surface@bbox[2,],paste(Source.Surface@bbox[1,],"\n",Source.Surface@bbox[2,],sep = " "))
Source.Surface.MaxArea <-
etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 500)
plot(EtrsTransform(Source.Surface))
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =    4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
Source.Surface<-EtrsTransform(Source.Surface)
x <- round(runif(1, min = 4321000, max = 4322000), 1)
y <- round(runif(1, min = 3211000, max = 3212000), 1)
xy <- cbind(x, y)
size = round(runif(1,min = 1500,max = 1500),0)
pl1 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + size,y + size,y)   ))),round(runif(1,min = 1,max = 100),0))
x <- x + size
pl2 <- Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + 2 * size,y + 2 * size,y)))),round(runif(1,min = 1,max = 100),0))
x<-x-size
y<-y+size
pl3 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y +  size,y +  size,y)   ))),round(runif(1,min = 1,max = 100),0))
sps <- SpatialPolygons(list(pl1,pl2,pl3),proj4string = CRS("+init=epsg:2100"))
df <-data.frame(val=c("R5","R40","R80"),row.names = sapply(slot(sps, "polygons"), function(x) slot(x, "ID")))
Source.Surface <-SpatialPolygonsDataFrame(sps,data = df)
# Uses the default etrsSurface method
Source.Surface.MaxArea <- etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 2000)
text(Source.Surface@bbox[1,],Source.Surface@bbox[2,],paste(Source.Surface@bbox[1,],"\n",Source.Surface@bbox[2,],sep = " "))
Source.Surface.MaxArea <-
etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 500)
Source.Surface<-EtrsTransform(Source.Surface)
plot(Source.Surface)
plot(Source.Surface.MaxArea,lty = 3,lwd = 1.2,border = 3,add=TRUE)
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =    4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
x <- round(runif(1, min = 4321000, max = 4322000), 1)
y <- round(runif(1, min = 3211000, max = 3212000), 1)
xy <- cbind(x, y)
size = round(runif(1,min = 1500,max = 1500),0)
pl1 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + size,y + size,y)   ))),round(runif(1,min = 1,max = 100),0))
x <- x + size
pl2 <- Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + 2 * size,y + 2 * size,y)))),round(runif(1,min = 1,max = 100),0))
x<-x-size
y<-y+size
pl3 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y +  size,y +  size,y)   ))),round(runif(1,min = 1,max = 100),0))
sps <- SpatialPolygons(list(pl1,pl2,pl3),proj4string = CRS("+init=epsg:2100"))
df <-data.frame(val=c("R5","R40","R80"),row.names = sapply(slot(sps, "polygons"), function(x) slot(x, "ID")))
Source.Surface <-SpatialPolygonsDataFrame(sps,data = df)
# Uses the default etrsSurface method
Source.Surface.MaxArea <- etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 2000)
text(Source.Surface@bbox[1,],Source.Surface@bbox[2,],paste(Source.Surface@bbox[1,],"\n",Source.Surface@bbox[2,],sep = " "))
Source.Surface.MaxArea <-
etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 500)
Source.Surface<-EtrsTransform(Source.Surface)
plot(Source.Surface)
plot(Source.Surface.MaxArea,lty = 3,lwd = 1.2,border = 3,add=TRUE)
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =    4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
example("etrsMaxArea")
x <- round(runif(1, min = 4321000, max = 4322000), 1)
y <- round(runif(1, min = 3211000, max = 3212000), 1)
xy <- cbind(x, y)
size = round(runif(1,min = 1500,max = 1500),0)
pl1 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + size,y + size,y)   ))),round(runif(1,min = 1,max = 100),0))
x <- x + size
pl2 <- Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y + 2 * size,y + 2 * size,y)))),round(runif(1,min = 1,max = 100),0))
x<-x-size
y<-y+size
pl3 <-Polygons(list(Polygon(cbind(c(x,x + size,x + size,x,x),c(y,y,y +  size,y +  size,y)   ))),round(runif(1,min = 1,max = 100),0))
sps <- SpatialPolygons(list(pl1,pl2,pl3),proj4string = CRS("+init=epsg:2100"))
df <-data.frame(val=c("R5","R40","R80"),row.names = sapply(slot(sps, "polygons"), function(x) slot(x, "ID")))
Source.Surface <-SpatialPolygonsDataFrame(sps,data = df)
# Uses the default etrsSurface method
Source.Surface.MaxArea <- etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 2000)
text(Source.Surface@bbox[1,],Source.Surface@bbox[2,],paste(Source.Surface@bbox[1,],"\n",Source.Surface@bbox[2,],sep = " "))
Source.Surface.MaxArea <-
etrsSurface(input.surface = Source.Surface, over.method.type = "MaxArea", cell.size = 500)
Source.Surface<-EtrsTransform(Source.Surface)
plot(Source.Surface)
plot(Source.Surface.MaxArea,lty = 3,lwd = 1.2,border = 3,add=TRUE)
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =    4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
plot(Source.Surface)
plot(Source.Surface.MaxArea,lty = 3,lwd = 1.2,border = 3,add=TRUE)
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =    4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
plot(Source.Surface)
plot(Source.Surface.MaxArea,lty = 3,lwd = 1.2,border = 3,add=TRUE)
x.y.s.s <- coordinates(EtrsTransform(Source.Surface))
x.y.max <- coordinates(Source.Surface.MaxArea)
text(x.y.s.s[,1],x.y.s.s[,2],Source.Surface@data$val,col = 4,cex = 1.5)
text(x.y.s.s[,1],x.y.s.s[,2] - 100,paste("Feature=",rownames(Source.Surface@data)),col =4,cex = 1.2)
text(x.y.max[,1],x.y.max[,2],Source.Surface.MaxArea@data$FEATURE,col=3)
title("The 3 regions in Etrs Grid using Max Area Intergration")
roxygenize(package.dir = "DasyMapR")
require(roxygen2)
roxygenize(package.dir = "DasyMapR")
setwd('~/ownCloud/plsthesis/')
try(detach(name = "package:DasyMapR",unload = TRUE))
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
update.packages()
rm(list=ls(all=TRUE))
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
detach(name = "package:DasyMapR",unload = TRUE)
detach(name = "package:DasyMapR",unload = TRUE,character.only = T)
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
rm(list=ls(all=TRUE))
require(devtools)
require(roxygen2)
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = "package:DasyMapR",unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
try(detach(name = "package:DasyMapR",unload = TRUE))
try(detach(name = package:DasyMapR,unload = TRUE))
sessionInfo()
library(DasyMapR)
sessionInfo()
packrat::set_opts(use.cache = TRUE)
devtools::load_all(".")
load_all
load_all()
library(devtools)
library(roxygen2)
setwd("~/ownCloud/plsthesis")
current.code <- as.package("DasyMapR")
load_all(current.code)
document(current.code)
document()
document(current.code)
system("R CMD build DasyMapR")
devtools::document(roclets=c('rd', 'collate', 'namespace'))
setwd("~/ownCloud/plsthesis/DasyMapR")
devtools::document(roclets=c('rd', 'collate', 'namespace'))
DASY_GPD
rm(DASY_GPD)
rm("DASY_GPD"
)
rm("DASY_GPD")
rm(list=ls(all=TRUE))
DASY_GPD
library(DasyMapR)
example("etrsPoint2Grid")
example("etrsPoints.default")
example("etrsPropValue")
par("mar"=c(.1,.1,.1,.1))
vignette("DasyMapR-vignette")
example("EtrsSourceSurface")
example("EtrsTableCodes,matrix,numeric-method")
example("EtrsTableCodes")
example("EtrsTableCodes,matrix,numeric-method")
vignette("DasyMapR-vignette")
setwd("~/ownCloud/plsthesis/DasyMapR")
setwd("~/ownCloud/plsthesis")
setwd("~/ownCloud/plsthesis/DasyMapR")
devtools::load_all(".")
devtools::install(build_vignettes = T)
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
.rs.restartR()
removeGeneric("CheckEtrsValidity")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
library("roxygen2")  # could use "require"
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
removeGeneric("CheckEtrsValidity")
removeGeneric("CheckEtrsResolution")
removeGeneric("EtrsTableCodes")
removeGeneric("EtrsCheckCodeColumns")
removeGeneric("etrsPoints")
removeGeneric("etrsCells")
removeGeneric("etrsGrid")
removeGeneric("etrsSurface")
removeGeneric("EtrsTransform")
removeGeneric("etrsSourceSurface")
removeGeneric("etrsAncillarySurface")
.rs.restartR()
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
# now we actually build and install the package
system("R CMD build DasyMapR")
system("R CMD INSTALL --preclean DasyMapR_0.0.0.9000.tar.gz")
system("R CMD check DasyMapR")
# and finally, make it available.
library("DasyMapR")
# check for old documentation
try(file.remove(file.path(getwd(),"DasyMapR/man/DasyMapR.pdf")))
# generate new documentation
system("R CMD Rd2pdf DasyMapR -o /home/etsakl/ownCloud/plsthesis/DasyMapR/man/DasyMapR.pdf")
packrat::set_opts(project = '~/ownCloud/plsthesis/DasyMapR', use.cache = FALSE)
library(DasyMapR)
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
setwd("~/ownCloud/plsthesis")
setwd('~/ownCloud/plsthesis/')
# remove the old version
try(detach(name = package:DasyMapR,unload = TRUE))
# load the packages we need for building / documentation
library("roxygen2")  # could use "require"
# generate documentation
roxygenize(package.dir = "DasyMapR")
setwd("~/ownCloud/DasyMapR")
library(rmarkdown)
rmarkdown:::render_site()
setwd("~/ownCloud/DasyMapR")
rmarkdown:::render_site()
setwd("~/ownCloud/plsthesis/DasyMapR")
library(DasyMapR)
devtools::install_github("etsakl/DasyMapR",build_vignette=T)
sessionInfo()
help("DasyMapR-package")
install.packages("rshiny")
library("rshiny")
